What is a Promise?

A Promise is a JavaScript object that represents the eventual completion (or failure) of an asynchronous operation.

It has three states:
1. **Pending** – initial state, neither fulfilled nor rejected.
2. **Fulfilled** – operation completed successfully.
3. **Rejected** – operation failed.

Basic Syntax of a Promise

const promise = new Promise((resolve, reject) => {
  // async task
  if (/* success */) {
    resolve("Success message");
  } else {
    reject("Error message");
  }
});

const checkAge = new Promise((resolve, reject) => {
  const age = 20;
  
  if (age >= 18) {
    resolve("Access granted"); // Success
  } else {
    reject("Access denied"); // Error
  }
});

// Handling the promise
checkAge
  .then((message) => {
    console.log(message); // Runs if resolved
  })
  .catch((error) => {
    console.error(error); // Runs if rejected
  });

Example 1: A Simple Promise

const myPromise = new Promise((resolve, reject) => {
  let value = 5;
  if (value > 3) {
    resolve("Value is greater than 3 ✅");
  } else {
    reject("Value is too small ❌");
  }
});

myPromise
  .then((message) => console.log("Resolved:", message))
  .catch((error) => console.log("Rejected:", error));


Example 2: Simulating API Delay

```javascript
function fetchData() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const success = true;
      if (success) {
        resolve("Data fetched successfully 📦");
      } else {
        reject("Failed to fetch data ❌");
      }
    }, 2000);
  });
}

fetchData()
  .then((data) => console.log(data))
  .catch((err) => console.log(err));


Chaining Promises

function step1() {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log("Step 1 done");
      resolve();
    }, 1000);
  });
}

function step2() {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log("Step 2 done");
      resolve();
    }, 1000);
  });
}

step1()
  .then(() => step2())
  .then(() => console.log("All steps completed ✅"));

Why Use Promises?

- Better than nested callbacks (callback hell)
- Easier error handling with `.catch()`
- Can be used with `async/await` for cleaner syntax

callback hell Example recreation using Promises
function waitAndLog(message, delay) {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log(message);
      resolve();
    }, delay);
  });
}

console.log("Start");

waitAndLog("1st step done", 1000)
  .then(() => waitAndLog("2nd step done", 1000))
  .then(() => waitAndLog("3rd step done", 1000))
  .then(() => waitAndLog("4th step done", 1000));
