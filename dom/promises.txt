What is a Promise?

A Promise is a JavaScript object that represents the eventual completion (or failure) of an asynchronous operation.

It has three states:
1. **Pending** – initial state, neither fulfilled nor rejected.
2. **Fulfilled** – operation completed successfully.
3. **Rejected** – operation failed.

Basic Syntax of a Promise

const promise = new Promise((resolve, reject) => {
  // async task
  if (/* success */) {
    resolve("Success message");
  } else {
    reject("Error message");
  }
});

const checkAge = new Promise((resolve, reject) => {
  const age = 20;
  
  if (age >= 18) {
    resolve("Access granted"); // Success
  } else {
    reject("Access denied"); // Error
  }
});

// Handling the promise
checkAge
  .then((message) => {
    console.log(message); // Runs if resolved
  })
  .catch((error) => {
    console.error(error); // Runs if rejected
  });

Example 1: A Simple Promise

const myPromise = new Promise((resolve, reject) => {
  let value = 5;
  if (value > 3) {
    resolve("Value is greater than 3 ✅");
  } else {
    reject("Value is too small ❌");
  }
});

myPromise
  .then((message) => console.log("Resolved:", message))
  .catch((error) => console.log("Rejected:", error));


Example 2: Simulating API Delay

function fetchData() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const success = true;
      if (success) {
        resolve("Data fetched successfully 📦");
      } else {
        reject("Failed to fetch data ❌");
      }
    }, 2000);
  });
}

fetchData()
  .then((data) => console.log(data))
  .catch((err) => console.log(err));


Chaining Promises

function step1() {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log("Step 1 done");
      resolve();
    }, 1000);
  });
}

function step2() {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log("Step 2 done");
      resolve();
    }, 1000);
  });
}

step1()
  .then(() => step2())
  .then(() => console.log("All steps completed ✅"));

Why Use Promises?

- Better than nested callbacks (callback hell)
- Easier error handling with `.catch()`
- Can be used with `async/await` for cleaner syntax

callback hell Example recreation using Promises
function waitAndLog(message, delay) {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log(message);
      resolve();
    }, delay);
  });
}
console.log("Start");
waitAndLog("1st step done", 1000)
  .then(() => waitAndLog("2nd step done", 1000))
  .then(() => waitAndLog("3rd step done", 1000))
  .then(() => waitAndLog("4th step done", 1000));

// 1. Validate order structure
function validateOrder(order) {
  return new Promise((resolve, reject) => {
    if (!order.customerId) {
      reject(new Error('Customer ID is required'));
    } else if (!order.items || order.items.length === 0) {
      reject(new Error('Order must contain items'));
    } else {
      console.log('✅ Order validated');
      resolve(order);
    }
  });
}

// 2. Check inventory availability
function checkInventory(order) {
  return new Promise(resolve => {
    setTimeout(() => {
      console.log('📦 Inventory checked');
      order.inventoryVerified = true;
      resolve(order);
    }, 800);
  });
}

// 3. Process payment
function processPayment(order) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const paymentSuccess = Math.random() > 0.2; // 80% success rate
      if (paymentSuccess) {
        console.log('💳 Payment processed');
        order.paymentStatus = 'completed';
        resolve(order);
      } else {
        reject(new Error('Payment declined'));
      }
    }, 1200);
  });
}

// Execute the pipeline
validateOrder({
  customerId: 'cust789',
  items: [{ id: 'prod456', qty: 1 }]
})
.then(checkInventory)
.then(processPayment)
.then(order => {
  console.log('🎉 Order completed:', order);
})
.catch(err => {
  console.error('❌ Order failed:', err.message);
});

Handling Multiple Orders (Promise.all)
Explanation: Shows how to process multiple orders concurrently and wait for all to complete.
function processSingleOrder(orderId) {
  return new Promise(resolve => {
    const processTime = 500 + Math.random() * 2000; // 0.5-2.5 seconds
    setTimeout(() => {
      resolve({
        orderId,
        status: 'processed',
        processTime: Math.round(processTime)
      });
    }, processTime);
  });
}

const orderBatch = ['order101', 'order102', 'order103', 'order104'];

// Process all orders in parallel
Promise.all(orderBatch.map(processSingleOrder))
  .then(results => {
    console.log('All orders processed:');
    console.table(results);
    const totalTime = results.reduce((sum, order) => sum + order.processTime, 0);
    console.log(`Total processing time: ${totalTime}ms`);
  })
  .catch(error => {
    console.error('Batch processing failed:', error);
  });

Order Processing with Timeout (Promise.race)
Explanation: Demonstrates implementing a timeout for order processing.

function processOrder(order) {
  // Simulate variable processing time (1-4 seconds)
  const processingTime = 1000 + Math.random() * 3000;
  
  return new Promise(resolve => {
    setTimeout(() => {
      resolve(`Order ${order.id} processed in ${Math.round(processingTime)}ms`);
    }, processingTime);
  });
}

function orderTimeout(order, timeoutMs) {
  return new Promise((_, reject) => {
    setTimeout(() => {
      reject(new Error(`Order ${order.id} timed out after ${timeoutMs}ms`));
    }, timeoutMs);
  });
}

const currentOrder = { id: 'web-order-789', items: 3 };

// Race between processing and timeout
Promise.race([
  processOrder(currentOrder),
  orderTimeout(currentOrder, 2500) // 2.5 second timeout
])
.then(result => console.log('Success:', result))
.catch(error => console.error('Error:', error.message));
