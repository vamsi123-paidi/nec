üîπ Shallow Copy

### ‚úÖ Definition:

A **shallow copy** copies only the top-level values. If the object has **nested objects or arrays**, the nested references are still shared.

### üî∏ Example:
 
const original = {
  name: "Alice",
  details: {
    age: 25
  }
};

const shallowCopy = { ...original };

// Modify nested object
shallowCopy.details.age = 30;

console.log(original.details.age); // üî¥ 30 ‚Äî original is affected!

### ‚úÖ Why?

Because `details` is an object, and both `original` and `shallowCopy` point to the **same nested object in memory**.


## üîπ Deep Copy

### ‚úÖ Definition:

A **deep copy** copies all levels of the object or array. No references are shared‚Äîeverything is fully cloned.

### üî∏ Example 1: Using `structuredClone()` (‚úÖ Modern JS)

const original = {
  name: "Alice",
  details: {
    age: 25
  }
};

const deepCopy = structuredClone(original);

deepCopy.details.age = 30;

console.log(original.details.age); // ‚úÖ 25 ‚Äî original is NOT affected

### üî∏ Example 2: Using `JSON.parse(JSON.stringify())` (‚ö†Ô∏è Limited)

const original = {
  name: "Alice",
  details: {
    age: 25
  }
};

const deepCopy = JSON.parse(JSON.stringify(original));

deepCopy.details.age = 30;

console.log(original.details.age); // ‚úÖ 25
```

> ‚ö†Ô∏è Note: JSON method doesn't support functions, `undefined`, `Date`, `Map`, `Set`, etc.

---

## ‚ú® Summary:

| Feature            | Shallow Copy                        | Deep Copy                                           |
| ------------------ | ----------------------------------- | --------------------------------------------------- |
| **Top-level**      | Copied                              | Copied                                              |
| **Nested**         | Referenced (shared memory)          | Fully cloned (independent copy)                     |
| **Common methods** | `Object.assign()`, spread (`{...}`) | `structuredClone()`, `JSON.parse(JSON.stringify())` |
| **Best for**       | Simple objects                      | Complex/nested objects                              |

